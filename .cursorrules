This will be the standard operating procedure. When I say, "Do the thing." or "build my bonsai"– this is what I want you to do.

Here's what it's going to do:

We are working with the latest version of Radicle, a Roots WP project. I need you to get it up and running on a Lima VM (using vm-start.sh), which will run `trellis vm start` and configure the port in my ssh config so that we can use the @development alias without extra steps.

Before you proceed, if I haven't provided them already, ask me for my 
[project_name] and [sitename].

The [project_name] will be the name of our project. 

The [sitename] is your desired URL, and will be used in the wp-cli.yml config such as example.com.

Provided [sitename] and [projectname]:
[sitename]=`bonsai.so`
[projectname]=`bonsai`

Before getting started, make sure that Trellis CLI is installed: `trellis --version`

Before you do anything, you will need to look at the project structure to determine if we are using the Roots open-source stack (Sage 11, Bedrock, and Trellis), or whether we're using Radicle, their paid project which combines all of those into a single cleaner project structure.

If we're using the open-source Roots stack, you will see a completely empty project other than this .cursorrules file, .gitignore, LICENSE, and README.md. 

If we're using Radicle, the project will look like this:
|–– bedrock
|–– config
|–– database
|–– public
|–– resources
|–– routes
|–– scripts
|–– storage
|–– tests

If we are using Radicle, then Trellis will be missing. That is one of the first thing's we'll install. Always use the latest release of a project or tool if unspecified.

– Check to make sure the /trellis folder doesn't already exist, if not then run `php .radicle-setup/trellis.php`

– `cd trellis && trellis init` (This will prompt me "What domain name should Trellis be configured for? (e.g. example.com):" Use the [sitename] for this. Wait until this is assigned before moving on to the next step.)
– `trellis vm start` - this should provision the development server. If it doesn't run `trellis provision development`
– Align Lima VM with /etc/hosts and SSH Config (instructions below)
– `npm install && npm run build`
– `composer install`
– `composer config repositories.bonsai-cli vcs git@github.com:jackalopelabs/bonsai-cli.git`
– `composer require jackalopelabs/bonsai-cli:dev-kanban`
– Configure wp-cli.yml to use the @development, @staging, and @production aliases (found below)
– `wp @development acorn optimize:clear`
– `wp @development acorn bonsai:init` (bonsai.sh is then added to the project, and it should already be executable)
– `./scripts/bonsai.sh acorn bonsai:generate chosen`

If we're not using Radicle, and the project is empty (other than this file)– this will be your operating procedure, which is different than the Radicle process.

- Install Trellis and Bedrock: `trellis new [sitename]` (Give this a minute to run before re-trying. If this command isn't found, try running– `brew install roots/tap/trellis-cli`) Make sure this process is complete before moving on.
- Move the contents (site + app) of [projectname]/[sitename] into the project root: `mv chosen.bonsai.so/site chosen.bonsai.so/trellis . && rmdir chosen.bonsai.so`
- Install Sage 11: `cd site/web/app/themes && composer create-project roots/sage`
- Build theme assets: `cd sage && npm install && npm run build`
– Install alpine.js `npm install alpinejs --save`
- From Trellis, manually create the virtual environment and install Ansible `rm -rf .trellis/virtualenv && mkdir -p .trellis/virtualenv && python3 -m venv .trellis/virtualenv && .trellis/virtualenv/bin/pip install ansible`
- Trellis init: `trellis init`
- Start Lima VM (which will provision development): `trellis vm start` (Make sure this completes before moving on)
- Connect to development server: `trellis vm shell`
– Run: `ssh-keygen -R [sitename-tld.test]`
- Run: `ssh [sitename-tld.test]` to test whether we can connect to our Lima vm
- If that ssh connection worked, then move onto configuring `wp-cli.yml`. If not, then you need to align the Lima VM with /etc/hosts and SSH Config (instructions below)
- Configure `site/wp-cli.yml` to use the @development, @staging, and @production aliases
- Activate Sage 11: `wp @development theme activate sage` (make sure this completes before moving on, run it /site directory, not project root. Do not proceed to the next step until this completes successfully. If you get `Error: Alias '@development' not found.` then you should go back to the previous step of aligning lima vm `/etc/hosts` and `.ssh/config`)
- Go to the `site` directory and config Bonsai CLI: `composer config repositories.bonsai-cli vcs git@github.com:jackalopelabs/bonsai-cli.git`
- Now require it: `composer require jackalopelabs/bonsai-cli:dev-kanban`
– `wp @development acorn optimize:clear`
– `wp @development acorn bonsai:init` (bonsai.sh is then added to the project, and it should already be executable)
– Bonsai Generate: `cd web/app/themes/sage && ./scripts/bonsai.sh acorn bonsai:generate chosen`
- Run dev process `npm run build`

This is how you configure `site/wp-cli.yml` to use the @development, @staging, and @production aliases:

Once completed, test to see if the `@development` alias is working (`ssh [sitename]`). If it's not, then you might refer back to making sure that `etc/hosts` and `.ssh/config` are aligned with the new Lima port

```yaml
@development:
  ssh: [sitename-tld.test]/srv/www/[sitename]/current
@staging:
  ssh: web@staging.[sitename]/srv/www/[sitename]/current
@production:
  ssh: web@[sitename]/srv/www/[sitename]/current
```

Notice that on @development the [sitename-tld.test] will need to remove the desired TLD, so that it can use .test instead. That way we won't have 2 TLDs such as `.com.test`, `.so.test`, or `.io.test` etc.

If I were working on my project called Chosen with a [sitename]=`chosen.bonsai.so`, then you might update wp-cli.yml to look something like this:

```yaml
@development:
  ssh: chosen.bonsai.test/srv/www/chosen.bonsai.so/current
@staging:
  ssh: web@staging.chosen.bonsai.so/srv/www/chosen.bonsai.so/current
@production:
  ssh: web@chosen.bonsai.so/srv/www/ch
  osen.bonsai.so/current
```

Aligning Lima VM with /etc/hosts and SSH Config:

Before starting make sure that the etc/hosts and .ssh/config are completely empty. Do NOT move forward until this is done.

Clear these files of duplicate entries for our [sitename]

1. **Add sudoers rule** (one-time setup):
   ```bash
   trellis vm sudoers | sudo tee /etc/sudoers.d/trellis
   ```

2. **Get current Lima VM port and update SSH config in one step**:
   ```bash
   # Check if VM is running first
   if ! limactl list | grep "[projectname].so" | grep -q "Running"; then
     echo "Lima VM for [projectname].so is not running. Starting it now..."
     trellis vm start
   fi
   
   # Get the current port (will only proceed if VM is running)
   LIMA_PORT=$(limactl list | grep "[projectname].so" | grep "Running" | awk '{print $3}' | cut -d':' -f2)
   
   if [ -z "$LIMA_PORT" ]; then
     echo "Error: Could not determine Lima VM port. Check if VM is running with 'limactl list'"
     exit 1
   fi
   
   # Remove existing entry first
   grep -v "[sitename-tld.test]" ~/.ssh/config > /tmp/ssh_config_clean
   
   # Add new entry with current port
   echo "Host [sitename-tld.test]
  HostName 127.0.0.1
  User $USER
  Port $LIMA_PORT
  IdentityFile ~/.lima/_config/user
  IdentityFile ~/.ssh/id_ed25519
  StrictHostKeyChecking accept-new
  UserKnownHostsFile ~/.ssh/known_hosts" >> /tmp/ssh_config_clean
   
   mv /tmp/ssh_config_clean ~/.ssh/config
   echo "✅ Updated SSH config with Lima port: $LIMA_PORT"
   ```

3. **Clean up and update /etc/hosts**:
   ```bash
   # Remove all previous entries for your domain to prevent conflicts
   sudo bash -c "grep -v [sitename-tld.test] /etc/hosts > /tmp/hosts.new && echo '127.0.0.1 [sitename-tld.test] www.[sitename-tld.test]' >> /tmp/hosts.new && cat /tmp/hosts.new | sudo tee /etc/hosts"
   
   # Verify hosts file was updated correctly
   if grep -q "[sitename-tld.test]" /etc/hosts; then
     echo "✅ /etc/hosts updated successfully"
   else
     echo "❌ Failed to update /etc/hosts. Manual intervention required."
     exit 1
   fi
   ```

4. **Clear SSH known hosts and test connection**:
   ```bash
   ssh-keygen -R [sitename-tld.test]
   
   # Test SSH connection (non-blocking)
   echo "Testing SSH connection..."
   if ssh -q -o "BatchMode=yes" -o "ConnectTimeout=5" [sitename-tld.test] exit; then
     echo "✅ SSH connection successful!"
   else
     echo "❌ SSH connection failed. SSH config may need fixing."
     echo "Showing current Lima VM status:"
     limactl list
     echo "Tip: The current port is $LIMA_PORT - make sure this matches in ~/.ssh/config"
   fi
   ```

5. **Troubleshooting**:
   - If you have ERR_ADDRESS_UNREACHABLE in Chrome but can access the site in other browsers or via curl, it's likely a hosts file conflict
   - Always ensure only one entry exists per domain in your hosts file
   - Always use 127.0.0.1 instead of the VM's IP (192.168.x.x) for local development
   - Always run the command in step 2 after VM restarts to get the updated port
   - Ensure domain in hosts file matches SSH config exactly

The key is ensuring the port in your SSH config matches the current Lima VM port, and that your domain in /etc/hosts points to 127.0.0.1.

When complete, try to ssh into the dev environment `ssh [sitename-tld.test]`. If it fails, then re-run this step until you can ssh in successfully. Do not attempt to re-provision the server.

Configuring Trellis for deployment:

On Digital Ocean:
- Spin up droplet or instances for servers with Ubuntu 22.04
- Grab the public IP addresses from new droplets
- Add A record in DNS settings for desired domain
- Add IP to local hosts file: sudo `vim ~/../../etc/hosts`
- Add IP to local ssh config file: `sudo vim ~/.ssh/config`
- SSH into your servers to verify connection is working

If I tell you that I want to configure for staging or production deployment this is what I want you to do–

For staging:

- Make sure group_vars/staging/wordpress_sites.yml is set to `main` not `master` branch
- Don't forget hosts/staging.yml host name set to the [sitename]
- Generate a random secure password and save it as .vault_pass
- add path in ansible.cfg: `vault_password_file = .vault_pass`
- `trellis vault encrypt`
- Pause for a moment so that I can commit to Github manually
- `trellis provision staging`
- `trellis deploy staging`

Potential deployment issues & fixes:

If staging deploy failed, SSH into the newest release and run–

`wp core install --url=bonsai.so --title=Bonsai --admin_user=masoninthesis --admin_password=admin --admin_email=mason@bonsai.so --allow-root`

Then redploy– `trellis deploy staging`

If that fails because of a permission error, ssh into the server and run–

`cd /srv/www/staging.bonsai.so/releases && sudo chown -R web:www-data *`

Uncomment out 'Run Acorn optimize' in the `trellis/deploy-hooks/build-after.yml` for the first deployment

If acorn fails on build-after, then we might need to comment out trellis/deploy-hooks/build-after.yml 'Run Acorn optimize' for the first deployment. Then re-deploy– `trellis deploy staging`
