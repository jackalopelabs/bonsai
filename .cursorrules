This will be the standard operating procedure. When I say, "Do the thing." or "build my bonsai"‚Äì this is what I want you to do.

Here's what it's going to do:

We are working with the latest version of Radicle, a Roots WP project. I need you to get it up and running on a Lima VM (using vm-start.sh), which will run `trellis vm start` and configure the port in my ssh config so that we can use the @development alias without extra steps.

Before you proceed, if I haven't provided them already, ask me for my 
[project_name] and [sitename].

The [project_name] will be the name of our project. 

The [sitename] is your desired URL, and will be used in the wp-cli.yml config such as example.com.

Provided [sitename] and [projectname]:
[sitename]=`bonsai.so`
[projectname]=`bonsai`
[your-username]=`masonlawlor`

‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è CRITICAL FIRST STEP - DO NOT PROCEED WITHOUT COMPLETING THIS ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è
+------------------------------------------------------------------+
|                     ‚ö° REQUIRED FIRST STEP ‚ö°                     |
|                                                                 |
| Create a file called clean-bonsai.sh with these contents:       |
|                                                                 |
| #!/bin/bash                                                     |
|                                                                 |
| # Clean hosts file                                              |
| sudo sed -i '' "/bonsai.test/d" /etc/hosts                      |
|                                                                 |
| # Backup SSH config                                             |
| cp ~/.ssh/config ~/.ssh/config.bak 2>/dev/null || true          |
|                                                                 |
| # Clean SSH config                                              |
| grep -v "bonsai.test" ~/.ssh/config > /tmp/ssh_config_clean 2>/dev/null || true |
| cat /tmp/ssh_config_clean | sudo tee ~/.ssh/config >/dev/null   |
|                                                                 |
| echo "‚úÖ Cleaned bonsai.test entries from hosts and SSH config" |
| echo "üìù SSH config backup created at ~/.ssh/config.bak"        |
|                                                                 |
| Then run:                                                       |
| 1. Make it executable: chmod +x clean-bonsai.sh                 |
| 2. Run it: ./clean-bonsai.sh                                    |
+------------------------------------------------------------------+

Before getting started, make sure that Trellis CLI is installed: `trellis --version`

Before you do anything, you will need to look at the project structure to determine if we are using the Roots open-source stack (Sage 11, Bedrock, and Trellis), or whether we're using Radicle, their paid project which combines all of those into a single cleaner project structure.

If we're using the open-source Roots stack, you will see a completely empty project other than this .cursorrules file, .gitignore, LICENSE, and README.md. 

If we're using Radicle, the project will look like this:
|‚Äì‚Äì bedrock
|‚Äì‚Äì config
|‚Äì‚Äì database
|‚Äì‚Äì public
|‚Äì‚Äì resources
|‚Äì‚Äì routes
|‚Äì‚Äì scripts
|‚Äì‚Äì storage
|‚Äì‚Äì tests

If we are using Radicle, then Trellis will be missing. That is one of the first thing's we'll install. Always use the latest release of a project or tool if unspecified.

‚Äì Check to make sure the /trellis folder doesn't already exist, if not then run `php .radicle-setup/trellis.php`
‚Äì `cd trellis && trellis init` (This will prompt me "What domain name should Trellis be configured for? (e.g. example.com):" Use the [sitename] for this. Wait until this is assigned before moving on to the next step.)
‚Äì `trellis vm start` - this should provision the development server. If it doesn't run `trellis provision development`
‚Äì Align Lima VM with /etc/hosts and SSH Config (instructions below)
‚Äì `npm install && npm run build`
‚Äì `composer install`
‚Äì `composer config repositories.bonsai-cli vcs git@github.com:jackalopelabs/bonsai-cli.git`
‚Äì `composer config --no-plugins allow-plugins.jackalopelabs/bonsai-cli true`
‚Äì `composer require jackalopelabs/bonsai-cli:dev-kanban --no-interaction`
‚Äì Configure wp-cli.yml to use the @development, @staging, and @production aliases (found below)
‚Äì `wp @development acorn optimize:clear`
‚Äì `wp @development acorn bonsai:init` (bonsai.sh is then added to the project, and it should already be executable)
‚Äì `./scripts/bonsai.sh acorn bonsai:generate chosen`

If we're not using Radicle, and the project is empty (other than this file)‚Äì this will be your operating procedure, which is different than the Radicle process.

- Install Trellis and Bedrock: `trellis new --force --name [sitename] --host [sitename] .` (Give this a minute to run before re-trying. If this command isn't found, try running‚Äì `brew install roots/tap/trellis-cli`) Make sure this process is complete before moving on.
- Move the contents (site + app) of [projectname]/[sitename] into the project root: `mv chosen.bonsai.so/site chosen.bonsai.so/trellis . && rmdir chosen.bonsai.so`
- Install Sage 11: `cd site/web/app/themes && composer create-project roots/sage`
- Build theme assets: `cd sage && npm install && npm run build`
‚Äì Install alpine.js `npm install alpinejs --save`
- From Trellis, manually create the virtual environment and install Ansible `rm -rf .trellis/virtualenv && mkdir -p .trellis/virtualenv && python3 -m venv .trellis/virtualenv && .trellis/virtualenv/bin/pip install ansible`
- Trellis init: `trellis init`
- Start Lima VM (which will provision development): `trellis vm start` (Make sure this completes before moving on)
- Connect to development server: `trellis vm shell`
‚Äì Run: `ssh-keygen -R [sitename-tld.test]`
- Run: `ssh-keygen -R [sitename-tld.test] && ssh -o StrictHostKeyChecking=accept-new [sitename-tld.test]` to test whether we can connect to our Lima vm
- If that ssh connection worked, then move onto configuring `wp-cli.yml`. If not, then you need to align the Lima VM with /etc/hosts and SSH Config (instructions below)
- Configure `site/wp-cli.yml` to use the @development, @staging, and @production aliases
- Activate Sage 11: `wp @development theme activate sage` (make sure this completes before moving on, run it /site directory, not project root. Do not proceed to the next step until this completes successfully. If you get `Error: Alias '@development' not found.` then you should go back to the previous step of aligning lima vm `/etc/hosts` and `.ssh/config`)
- Go to the `site` directory and config Bonsai CLI: `composer config repositories.bonsai-cli vcs git@github.com:jackalopelabs/bonsai-cli.git`
‚Äì `composer config --no-plugins allow-plugins.jackalopelabs/bonsai-cli true`
‚Äì `composer require jackalopelabs/bonsai-cli:dev-kanban --no-interaction`
‚Äì `wp @development acorn optimize:clear`
‚Äì `wp @development acorn bonsai:init` (bonsai.sh is then added to the project, and it should already be executable)
‚Äì Bonsai Generate: `cd web/app/themes/sage && ./scripts/bonsai.sh acorn bonsai:generate chosen`
- Run dev process `npm run build`

This is how you configure `site/wp-cli.yml` to use the @development, @staging, and @production aliases:

Once completed, test to see if the `@development` alias is working (`ssh [sitename]`). If it's not, then you might refer back to making sure that `etc/hosts` and `.ssh/config` are aligned with the new Lima port

```yaml
@development:
  ssh: [sitename-tld.test]/srv/www/[sitename]/current
@staging:
  ssh: web@staging.[sitename]/srv/www/[sitename]/current
@production:
  ssh: web@[sitename]/srv/www/[sitename]/current
```

Notice that on @development the [sitename-tld.test] will need to remove the desired TLD, so that it can use .test instead. That way we won't have 2 TLDs such as `.com.test`, `.so.test`, or `.io.test` etc.

If I were working on my project called Chosen with a [sitename]=`chosen.bonsai.so`, then you might update wp-cli.yml to look something like this:

```yaml
@development:
  ssh: chosen.bonsai.test/srv/www/chosen.bonsai.so/current
@staging:
  ssh: web@staging.chosen.bonsai.so/srv/www/chosen.bonsai.so/current
@production:
  ssh: web@chosen.bonsai.so/srv/www/ch
  osen.bonsai.so/current
```

Aligning Lima VM with /etc/hosts and SSH Config:

Before starting make sure that the etc/hosts and .ssh/config are completely empty. Do NOT move forward until this is done.

Clear these files of duplicate entries for our [sitename]

1. **Add sudoers rule** (one-time setup):
   ```bash
   trellis vm sudoers | sudo tee /etc/sudoers.d/trellis
   ```

2. **Get current Lima VM port**:
   ```bash
   limactl list
   ```
   Note the port number (e.g., 54368) for your VM.

3. **Update /etc/hosts**:
   ```bash
   sudo trellis vm start
   ```
   This should automatically update your hosts file. Verify with:
   ```bash
   cat /etc/hosts | grep your-domain
   ```
   Ensure it shows: `127.0.0.1 your-domain.test`

4. **Update SSH config**:
   ```bash
   nano ~/.ssh/config
   ```
   Add or update entry (replace PORT with the number from step 2):
   Make sure that there are not duplicate entries, if there are remove the outdated one. For the [your-username], find the system username and use that.
   ```
   Host your-domain.test
     HostName 127.0.0.1
     User [your-username]
     Port PORT
     IdentityFile ~/.lima/_config/user
     IdentityFile ~/.ssh/id_ed25519
     StrictHostKeyChecking accept-new
     UserKnownHostsFile ~/.ssh/known_hosts
   ```

5. **Test connection**:
   ```bash
   ssh your-domain.test
   ```

6. **Troubleshooting**:
   - If multiple entries exist for the same host, remove duplicates
   - Always use the most recent port from `limactl list`
   - Ensure domain in hosts file matches SSH config exactly

The key is ensuring the port in your SSH config matches the current Lima VM port, and that your domain in /etc/hosts points to 127.0.0.1.

When complete, try to ssh into the dev environment `ssh [sitename-tld.test]`. If it fails, then re-run this step until you can ssh in successfully. Do not attempt to re-provision the server.

Configuring Trellis for deployment:

On Digital Ocean:
- Spin up droplet or instances for servers with Ubuntu 22.04
- Grab the public IP addresses from new droplets
- Add A record in DNS settings for desired domain
- Add IP to local hosts file: sudo `vim ~/../../etc/hosts`
- Add IP to local ssh config file: `sudo vim ~/.ssh/config`
- SSH into your servers to verify connection is working

If I tell you that I want to configure for staging or production deployment this is what I want you to do‚Äì

For staging:

- Make sure group_vars/staging/wordpress_sites.yml is set to `main` not `master` branch
- Don't forget hosts/staging.yml host name set to the [sitename]
- Generate a random secure password and save it as .vault_pass
- add path in ansible.cfg: `vault_password_file = .vault_pass`
- `trellis vault encrypt`
- Pause for a moment so that I can commit to Github manually
- `trellis provision staging`
- `trellis deploy staging`

Potential deployment issues & fixes:

If staging deploy failed, SSH into the newest release and run‚Äì

`wp core install --url=bonsai.so --title=Bonsai --admin_user=masoninthesis --admin_password=admin --admin_email=mason@bonsai.so --allow-root`

Then redploy‚Äì `trellis deploy staging`

If that fails because of a permission error, ssh into the server and run‚Äì

`cd /srv/www/staging.bonsai.so/releases && sudo chown -R web:www-data *`

Uncomment out 'Run Acorn optimize' in the `trellis/deploy-hooks/build-after.yml` for the first deployment

If acorn fails on build-after, then we might need to comment out trellis/deploy-hooks/build-after.yml 'Run Acorn optimize' for the first deployment. Then re-deploy‚Äì `trellis deploy staging`

## Custom Bonsai Configuration

After generating the chosen or bonsai components, you should ask if a custom configuration is needed:

1. Ask: "Would you like to create a custom Bonsai configuration? If yes: 
  - What would you like to name it? 
  - What is it for?"

2. If the answer is yes:
   - Create directory (if it doesn't exist): `mkdir -p site/config/bonsai`
   - Copy the chosen template: `cp site/vendor/jackalopelabs/bonsai-cli/config/templates/chosen.yml site/config/bonsai/[config-name].yml`
   - Edit the configuration file to match the provided description
   - Run: `./scripts/bonsai.sh acorn bonsai:generate [config-name]`

## Gearbox Configuration

If you hear "gearbox" or I ask for a Gearbox configuration, here's what Gearbox is:

## üß† **Gearbox ‚Äî Current Summary (May 2025)**

**Gearbox** is a modular component of BonsaiOS that displays your favorite physical and digital tools as a **category-based heatmap grid**. It's designed to be visually compact, highly scannable, and natively Tailwind-styled for performance and portability.

### ‚ú® What It Does Now:

* Breaks your gear into clear **categories** like:

  * Bags, Vehicles, Camping, Power, Electronics, Video Production, Software
* Uses **GitHub-style square grids** to represent each item
* Each item is represented by a **rounded square** (with hover interaction)
* Squares are lightweight, color-coded with Tailwind utility classes
* Fully responsive masonry layout with Tailwind's `grid-cols` logic
* Deployed in the `.col-span-3` section of your dashboard next to Goals and Journal

### üì¶ Current HTML Output (drop-in ready)

This HTML block represents the current state of the product in your BonsaiOS dashboard:

```html
<!-- Gearbox Categories -->
<div class="rounded-2xl bg-white/5 p-6 backdrop-blur-sm shadow-sm col-span-3">
  <h3 class="text-lg font-medium mb-4">Gearbox Categories</h3>

  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
    <!-- Category block -->
    <div>
      <h4 class="text-sm font-semibold text-white/70 mb-2">Bags</h4>
      <div class="grid grid-rows-5 gap-[3px]" style="grid-auto-flow: column;">
        <div title="Cotopaxi Allpa 28L" class="aspect-square w-full bg-teal-400/30 hover:bg-teal-400/80 transition rounded"></div>
        <div title="Cotopaxi Allpa 35L" class="aspect-square w-full bg-teal-400/30 hover:bg-teal-400/80 transition rounded"></div>
        <div title="Cotopaxi Allpa X 1.5L" class="aspect-square w-full bg-teal-400/30 hover:bg-teal-400/80 transition rounded"></div>
        <div title="Cotopaxi Allpa X 3L" class="aspect-square w-full bg-teal-400/30 hover:bg-teal-400/80 transition rounded"></div>
        <div title="Osprey Poco LT" class="aspect-square w-full bg-teal-400/30 hover:bg-teal-400/80 transition rounded"></div>
        <div title="Black Diamond Halo 25L" class="aspect-square w-full bg-teal-400/30 hover:bg-teal-400/80 transition rounded"></div>
        <div title="Black Diamond Wall Hauler 125" class="aspect-square w-full bg-teal-400/30 hover:bg-teal-400/80 transition rounded"></div>
        <div title="Black Diamond Wall Hauler 70" class="aspect-square w-full bg-teal-400/30 hover:bg-teal-400/80 transition rounded"></div>
      </div>
    </div>
    
    <!-- Additional category blocks would go here -->
  </div>
</div>
```

**Note:** This code should be merged with the existing homepage layout/components/sections, not replace them.

## üå± **Gearbox ‚Äî Future Vision**

> **Gearbox will evolve from a static visual index into a living memory graph and sponsor-facing toolkit.**

### üîÆ Coming Soon:

* Clickable squares open detail modals with:

  * Usage logs
  * AI-generated summaries
  * Links, receipts, affiliate codes
* Brands will be able to discover real users of their gear and sponsor them directly
* AI coaches will reference Gearbox data in personalized suggestions
* Data can be exported, shared publicly (or monetized privately), and version-controlled

### Manual Implementation Instructions

For Gearbox, follow these steps instead of trying to use the bonsai:generate command:

1. Create a custom component for Gearbox:
   ```bash
   mkdir -p resources/views/bonsai/components/chosen
   ```

2. Create the Gearbox component file (resources/views/bonsai/components/chosen/gearbox.blade.php):
   ```php
   @props([
       'title' => 'Gearbox Categories',
       'containerClasses' => 'rounded-2xl bg-white/5 p-6 backdrop-blur-sm shadow-sm col-span-3',
       'titleClasses' => 'text-lg font-medium mb-4',
       'gridClasses' => 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6',
       'categories' => [],
       'categoryStyles' => [
           'titleClass' => 'text-sm font-semibold text-white/70 mb-2',
           'gridClass' => 'grid grid-rows-5 gap-[3px]',
           'gridStyle' => 'grid-auto-flow: column;',
           'itemClass' => 'aspect-square w-full bg-{color}-500/30 hover:bg-{color}-500/80 transition rounded'
       ]
   ])

   <div class="{{ $containerClasses }}">
     <h3 class="{{ $titleClasses }}">{{ $title }}</h3>

     <div class="{{ $gridClasses }}">
       @foreach($categories as $category)
         <!-- {{ $category['name'] }} category -->
         <div>
           <h4 class="{{ $categoryStyles['titleClass'] }}">{{ $category['name'] }}</h4>
           <div class="{{ $categoryStyles['gridClass'] }}" style="{{ $categoryStyles['gridStyle'] }}">
             @foreach($category['items'] as $item)
               @php
                 $itemClass = str_replace('{color}', $category['colorClass'], $categoryStyles['itemClass']);
               @endphp
               <div title="{{ $item }}" class="{{ $itemClass }}"></div>
             @endforeach
           </div>
         </div>
       @endforeach
     </div>
   </div>
   ```

3. Create a section to include the Gearbox (resources/views/bonsai/sections/gearbox_section.blade.php):
   ```php
   <!-- Gearbox Section -->
   <div class="max-w-7xl mx-auto px-4 py-8">
     <x-bonsai::chosen.gearbox 
       :categories="[
         [
           'name' => 'Bags',
           'colorClass' => 'teal',
           'items' => [
             'Cotopaxi Allpa 28L',
             'Cotopaxi Allpa 35L',
             'Cotopaxi Allpa X 1.5L',
             'Cotopaxi Allpa X 3L',
             'Osprey Poco LT',
             'Black Diamond Halo 25L',
             'Black Diamond Wall Hauler 125',
             'Black Diamond Wall Hauler 70'
           ]
         ],
         [
           'name' => 'Vehicles',
           'colorClass' => 'blue',
           'items' => [
             '2018 Toyota 4Runner TRD Off-Road',
             '2025 Forest River Cherokee Wolf Pup 16bhsbl'
           ]
         ],
         // Add more categories as needed
       ]"
     />
   </div>
   ```

4. Create a page template for the Gearbox (resources/views/bonsai/templates/gearbox-page.blade.php):
   ```php
   @extends('layouts.app')

   @section('content')
     <div class="dark bg-gray-900 min-h-screen text-white">
       @include('bonsai.sections.site_header')
       
       <div class="container mx-auto py-10">
         <h1 class="text-4xl font-bold mb-8 text-center">Gearbox Dashboard</h1>
         <p class="text-xl text-gray-300 mb-10 text-center max-w-4xl mx-auto">
           A visual collection of all my favorite physical and digital tools.
         </p>
         
         @include('bonsai.sections.gearbox_section')
       </div>
       
       @include('bonsai.sections.site_footer')
     </div>
   @endsection
   ```

5. Create a page that uses the template (resources/views/pages/gearbox.blade.php):
   ```php
   @include('bonsai.templates.gearbox-page')
   ```

6. Build the assets with:
   ```bash
   yarn build
   ```

7. Access the page at: `https://bonsai.test/gearbox/`
